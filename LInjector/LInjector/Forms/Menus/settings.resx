<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="LInjectorLabel.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        geza8BNLBLd84nkAn07zP3w2gHndc/YTatvS76ne+jNs/dgwBIAAbJ8NmKXCKzp3qu3L/1RdvekBdf3w
        k9ZiHiMFg3lvTv395pkHrDX+5oEg5nzBhsAC2z4UBAEggPSRQODIg0DN9l3zpJ/+xs1qUet2tazjEotF
        rReqwaZha1uxaeMPHxiaDnWDABBAWsrAED/K758SnIbPf0QACADSGASAAAABIAAEAAgAASAAQAAIAAEA
        AkAACAAQAAJAAIAAEAACAASAALhoAAEgAAAEgAAAEAACAEAACAAAASAAAASAAAAQAAIAQAAIAAABIAAY
        g2thcJTgVGAEQIAlNaaNzEm+fY1njThd8fXWQaEIAAFAkl4DXfEN1um+5jFee7c8PWLceO4v1MWrfmi7
        awABIABbCaC77nR13fDPRvz5gOaZAjvX/hgBIAACLdkFsGf4iVG5Br66BgEgAAINASAABAAIAAEgAEAA
        CAABAAJAAAgAEAACQACAABAAAgAEgAAQACAABIAAAAEgAAQACAABIABAAAgAAQACQAAIABAAAkAAgAAQ
        AAIABIAAEAAgAASAAAABIAAEAAgAASAAQAAIAAEAAkAACAAQAAJAAIAAEAACQAAIAAEgAASAABAAAkAA
        CAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAA
        EAACQAAIAAEgAASAABAAAkAACAABEGgIAAEgAEAACAABAAJAAAgAEAACQACAABAAAgAEgAAQACAABIAA
        AAEgAAQACAABIABAAAgAAQACQAAIABAAAkAAgAAQAAIABIAAEAAgAASAAAABIAAEAAgAASAAQAAIAAEA
        AkAACAAQAAJAAIAAEAACAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAA
        AkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAEAAC
        QACAABAAAgAEgAAQACAABIAAAAEgAAQACAABIABAAAgAAQACQAAIABAAAkAAgAAQAAIABIAAEAAgAASA
        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
        SUVORK5CYII=
</value>
  </data>
</root>